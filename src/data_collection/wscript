#! python

import yaml
import os
import datetime


# YESTERDAY is necessary since the twitter API does not allow to specify
# hours, etc. and we do not want to skip tweets
YESTERDAY = (datetime.datetime.utcnow() - datetime.timedelta(days=1)).date()
TODAY = datetime.datetime.utcnow().date()
PATH_DATA_RAW = os.path.join('bld', 'out', 'data_raw')


if not os.path.exists(PATH_DATA_RAW):
    os.makedirs(PATH_DATA_RAW)


def twitter_timeframe(indicator: str, start: str) -> list:
    date = datetime.datetime.strptime(start, '%Y-%m-%d')
    arr = []

    for year in range(date.year, 2018):
        arr += halves(year)

    # if indicator in ['bitcoin']:
    #     for year in range(date.year, 2016):
    #         arr += halves(year)

    #     for year in range(2016, 2018):
    #         arr += weeks(year)

    # elif indicator in ['potcoin']:
    #     for year in range(date.year, 2018):
    #         arr += halves(year)

    return arr


def halves(year: int) -> list:
    arr = []

    if year == 2017:
        arr.append((
            str(datetime.date(year, 1, 1)), str(datetime.date(year, 6, 30)),
            '{}_1_partial'.format(year)
        ))
    else:
        arr.append((
            str(datetime.date(year, 1, 1)), str(datetime.date(year, 6, 30)),
            '{}_1'.format(year)
        ))
        arr.append((
            str(datetime.date(year, 6, 30)), str(datetime.date(year, 12, 31)),
            '{}_2'.format(year)
        ))

    return arr


def weeks(year: int) -> list:
    arr = []
    date = datetime.date(year, 1, 1)

    while date < YESTERDAY:
        arr.append((
            str(date), str(date + datetime.timedelta(weeks=1)),
            '{}_{}'.format(year, date.isocalendar()[1])
        ))
        date += datetime.timedelta(weeks=1)
    arr.append((
        str(date), str(YESTERDAY),
        '{}_{}_partial'.format(year, date.isocalendar()[1])
    ))

    return arr


def build(ctx):
    # Tests
    ctx(
        features='run_py_script',
        source=os.path.join('Poloniex', 'test_poloniex_data.py'),
        deps=ctx.path_to(
            ctx, 'IN_DATA_COLLECTION', 'Poloniex', 'poloniex_data.py')
    )

    ctx.add_group()

    # Poloniex builder
    # Open main poloniex config file
    with open(os.path.join('src', 'data_collection', 'Poloniex',
                           'poloniex_config.yml'), 'r') as file:
        polo_config = yaml.load(file.read())

    # Loop over exchange key
    for key in polo_config:
        ctx(
            features='run_py_script',
            source=os.path.join('Poloniex', 'poloniex_data.py'),
            deps=[
                ctx.path_to(
                    ctx, 'IN_DATA_COLLECTION', 'Poloniex',
                    'poloniex_config.yml')
            ],
            target=[
                ctx.path_to(
                    ctx, 'OUT_DATA_RAW', '{}_trade_history.csv'.format(key)),
                ctx.path_to(
                    ctx, 'OUT_DATA_RAW', '{}_chart_data.csv'.format(key)),
                ctx.path_to(ctx, 'OUT_DATA_RAW', '{}.yml'.format(key)),
            ],
            append=key,
        )

    # # Twitter builder
    # # Open main Twitter config
    # path_config_main = os.path.join(
    #     'src', 'data_collection', 'Twitter', 'twitter_config.yml')

    # with open(path_config_main, 'r') as file:
    #     twitter_config_main = yaml.load(file.read())

    # # Check if data was downloaded before. If yes, load temporary config and
    # # adjust ``since`` to ``until`` and check if ``until`` is today, then exit.
    # # Twitter data is only downloaded till yesterday, because a more
    # # fine-grained seems not possible up to now.
    # for query in twitter_config_main:
    #     query_conf = twitter_config_main[query]

    #     path_config_temp = os.path.join(
    #         PATH_DATA_RAW, 'twitter_{}.yml'.format(query))

    #     try:
    #         with open(path_config_temp) as file:
    #             query_conf['since'] = yaml.load(file.read()).get('until')
    #     finally:
    #         mode = 'w+'
    #         if query_conf['since'] == str(YESTERDAY):
    #             break

    #     for start, end, suffix in twitter_timeframe(query,
    #                                                 query_conf['since']):

    #         query_conf['since'] = start
    #         query_conf['until'] = end

    #         ctx(
    #             features='run_py_script',
    #             source=os.path.join(
    #                 'Twitter', 'GetOldTweets-python', 'Exporter.py'),
    #             deps=[
    #                 ctx.path_to(
    #                     ctx, 'IN_DATA_COLLECTION', 'Twitter',
    #                     'twitter_config.yml')
    #             ],
    #             target=[
    #                 ctx.path_to(
    #                     ctx, 'OUT_DATA_RAW', 'twitter_{}_{}.csv'.format(
    #                         query, suffix)),
    #                 ctx.path_to(
    #                     ctx, 'OUT_DATA_RAW', 'twitter_{}.yml'.format(query)),
    #             ],
    #             append=(
    #                 ['--' + opt + ' ' + str(query_conf[opt]) if not
    #                  opt.startswith('toptweets') else '--toptweets'
    #                  for opt in query_conf] +
    #                 ['--filename {}'.format(
    #                     os.path.join(
    #                         'out', 'data_raw',
    #                         'twitter_' + query + '_' + suffix))
    #                  ] +
    #                 ['--mode {}'.format(mode)]
    #             ),
    #         )

    #     with open(os.path.join(PATH_DATA_RAW, 'twitter_{}.yml'
    #                            .format(query)), 'w') as file:
    #         yaml.dump({'until': str(YESTERDAY)}, file)

